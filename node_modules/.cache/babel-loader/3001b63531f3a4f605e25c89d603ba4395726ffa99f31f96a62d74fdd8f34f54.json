{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import'../css/app.css';import EatsApp from'./Universes/EWI/EatsApp';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BACKEND_URL='https://backend-gwc.onrender.com';function App(){const[userData,setUserData]=useState(null);const[error,setError]=useState(null);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{const tg=window.Telegram.WebApp;tg.ready();tg.expand();console.log('Telegram WebApp initialized');const initData=tg.initDataUnsafe;console.log('Init data from Telegram:',initData);if(initData&&initData.user){const userIdFromTg=initData.user.id.toString();console.log('User ID from Telegram:',userIdFromTg);axios.post(\"\".concat(BACKEND_URL,\"/auth\"),{user_id:userIdFromTg}).then(response=>{console.log('Full response from backend:',response);console.log('Response data from backend:',response.data);if(!response.data||!response.data.telegram_id){throw new Error('Invalid data received from server');}// Проверим наличие всех необходимых полей\nconst requiredFields=['telegram_id','totalClicks','energy','energyMax','damageLevel','energyLevel','regenLevel'];const missingFields=requiredFields.filter(field=>response.data[field]===undefined);if(missingFields.length>0){console.error('Missing fields in user data:',missingFields);throw new Error(\"Missing fields: \".concat(missingFields.join(', ')));}setUserData(response.data);setIsLoading(false);}).catch(err=>{console.error('Error initializing user:',err);setError(\"Failed to initialize user data: \".concat(err.message));setIsLoading(false);});}else{console.error('User data not found in Telegram WebApp');setError('User data not found in Telegram WebApp.');setIsLoading(false);}document.body.style.backgroundColor=tg.backgroundColor;document.body.style.color=tg.textColor;},[]);if(isLoading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}if(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error]});}return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:userData?/*#__PURE__*/_jsx(EatsApp,{userData:userData}):/*#__PURE__*/_jsx(\"div\",{children:\"No user data available\"})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","EatsApp","jsx","_jsx","jsxs","_jsxs","BACKEND_URL","App","userData","setUserData","error","setError","isLoading","setIsLoading","tg","window","Telegram","WebApp","ready","expand","console","log","initData","initDataUnsafe","user","userIdFromTg","id","toString","post","concat","user_id","then","response","data","telegram_id","Error","requiredFields","missingFields","filter","field","undefined","length","join","catch","err","message","document","body","style","backgroundColor","color","textColor","children","className"],"sources":["C:/Users/valery-sm/Frontend_GWC/src/Universes/EWI/src/EatsApp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../css/app.css'; \nimport EatsApp from './Universes/EWI/EatsApp';\n\nconst BACKEND_URL = 'https://backend-gwc.onrender.com';\n\nfunction App() {\n  const [userData, setUserData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const tg = window.Telegram.WebApp;\n    tg.ready();\n    tg.expand();\n\n    console.log('Telegram WebApp initialized');\n\n    const initData = tg.initDataUnsafe;\n    console.log('Init data from Telegram:', initData);\n\n    if (initData && initData.user) {\n      const userIdFromTg = initData.user.id.toString();\n      console.log('User ID from Telegram:', userIdFromTg);\n      \n      axios.post(`${BACKEND_URL}/auth`, { user_id: userIdFromTg })\n        .then(response => {\n          console.log('Full response from backend:', response);\n          console.log('Response data from backend:', response.data);\n          if (!response.data || !response.data.telegram_id) {\n            throw new Error('Invalid data received from server');\n          }\n          // Проверим наличие всех необходимых полей\n          const requiredFields = ['telegram_id', 'totalClicks', 'energy', 'energyMax', 'damageLevel', 'energyLevel', 'regenLevel'];\n          const missingFields = requiredFields.filter(field => response.data[field] === undefined);\n          if (missingFields.length > 0) {\n            console.error('Missing fields in user data:', missingFields);\n            throw new Error(`Missing fields: ${missingFields.join(', ')}`);\n          }\n          setUserData(response.data);\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.error('Error initializing user:', err);\n          setError(`Failed to initialize user data: ${err.message}`);\n          setIsLoading(false);\n        });\n    } else {\n      console.error('User data not found in Telegram WebApp');\n      setError('User data not found in Telegram WebApp.');\n      setIsLoading(false);\n    }\n\n    document.body.style.backgroundColor = tg.backgroundColor;\n    document.body.style.color = tg.textColor;\n  }, []);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      {userData ? <EatsApp userData={userData} /> : <div>No user data available</div>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}